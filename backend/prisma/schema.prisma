generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(CASHIER)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  sales           Sale[]
  inventoryLogs   InventoryLog[]
  refreshTokens   RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Product {
  id           String  @id @default(uuid())
  sku          String  @unique
  name         String
  category     String?
  price        Decimal @db.Decimal(10, 2)
  costPrice    Decimal @db.Decimal(10, 2) @map("cost_price")
  stockQty     Int     @default(0) @map("stock_qty")
  reorderLevel Int     @default(10) @map("reorder_level")
  imageUrl     String? @map("image_url")
  barcode      String? @unique
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  saleItems     SaleItem[]
  inventoryLogs InventoryLog[]

  @@map("products")
}

model Sale {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  customerId    String?       @map("customer_id")
  totalAmount   Decimal       @db.Decimal(10, 2) @map("total_amount")
  paymentMethod PaymentMethod @map("payment_method")
  discount      Decimal       @default(0) @db.Decimal(10, 2)
  tax           Decimal       @default(0) @db.Decimal(10, 2)
  status        SaleStatus    @default(COMPLETED)
  receiptNumber String        @unique @map("receipt_number")
  createdAt     DateTime      @default(now()) @map("created_at")

  user     User       @relation(fields: [userId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  items    SaleItem[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String  @map("sale_id")
  productId String  @map("product_id")
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2) @map("unit_price")
  subtotal  Decimal @db.Decimal(10, 2)

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sales Sale[]

  @@map("customers")
}

model InventoryLog {
  id        String          @id @default(uuid())
  productId String          @map("product_id")
  userId    String          @map("user_id")
  changeQty Int             @map("change_qty")
  reason    InventoryReason
  notes     String?
  createdAt DateTime        @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("inventory_logs")
}

model StoreSettings {
  id           String  @id @default(uuid())
  storeName    String  @map("store_name")
  storeAddress String? @map("store_address")
  storePhone   String? @map("store_phone")
  storeEmail   String? @map("store_email")
  taxRate      Decimal @default(0) @db.Decimal(5, 2) @map("tax_rate")
  currency     String  @default("USD")
  receiptNote  String? @map("receipt_note")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("store_settings")
}

enum Role {
  ADMIN
  CASHIER
  INVENTORY_MANAGER
}

enum PaymentMethod {
  CASH
  CARD
  E_WALLET
}

enum SaleStatus {
  PENDING
  COMPLETED
  REFUNDED
  CANCELLED
}

enum InventoryReason {
  SALE
  RESTOCK
  ADJUSTMENT
  DAMAGE
  RETURN
}